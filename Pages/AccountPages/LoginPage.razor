@page "/identity/account/login"
@layout AuthenticationLayout
@inject IJSRuntime JS
@inject NavigationManager navigationManager

<div class="container">
        <div class="row">
           <div class="col-lg-4"></div>
            <div class="col-lg-4">
                <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
                 <DataAnnotationsValidator/>
                    <div class="card bg-dark" style="opacity:0.85; margin-top: 50%; border-radius:10px; color: #fbf9f9; font-weight:bold;">
                        <div class="card-header text-center fs-5">Login</div>
                       <div class="container">
                            <div class="row">
                             <div class="col-lg-4 col-md-4 col-sm-4"></div>
                             <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                 <img style="border-radius:20px;" src="images/logo/logoImg.png" height="75" width="75"/>
                             </div>
                             <div class="col-lg-4 col-md-4 col-sm-4"></div>
                             </div>
                         </div>
                            <div class="card-body">
                                    <div class="form-group mt-3">
                                        <label class="form-label">Email</label>
                                        <InputText @bind-Value="User.Email" class="form-control"/>
                                    </div>
                                    <div class="form-group mt-3">
                                        <label class="form-label">Password</label>
                                        <input type="password" class="form-control" @bind="User.Password" />
                                    </div>
                                    <div class="form-group mt-3">
                                        <button type="submit" class="btn btn-primary float-end">Login</button>
                                    </div>
                              
                             </div>
                            <div class="card-footer text-center">
                                 <span>You do not have an account?
                                 <a href="identity/account/register" class="btn-link">Register</a>
                                 </span>
                                 <ValidationSummary/>
                            </div>
                         </div>                      
                </EditForm>
            </div>
            <div class="col-lg-4"></div>
        </div>
</div>


<div class="modal" style="display:@(IsModalVisible ? "block" : "none")">
    <div class="modal-content">
        <span class="close" @onclick="CloseModal">&times;</span>
        <h2>@ModalTitle</h2>
        <p>@ModalMessage</p>
        <button class="btn btn-primary" href="/home/dashboard" @onclick="CloseModal" >OK</button>
    </div>
</div>

<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
        border-radius: 10px;
        text-align: center;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }
</style>

@code {
    Login User = new();

    [CascadingParameter] public Task<AuthenticationState> AuthenticationState{ get; set; }
    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }


    async Task HandleLogin()
    {
        var result = await accountService.SignInAsync(User);
        if(result.Flag)
        {
            
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession() { Token = result.Token, RefreshToken = result.RefreshToken });
            
            navigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
             ShowModal(result.Message, "Alert");
        }
    }


    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;

        if (!isUserAuthenticated)
        {
            navigationManager.NavigateTo("/identity/account/login");
        }

    }

    public bool IsModalVisible { get; set; } = false;
    public string ModalMessage { get; set; } = string.Empty;
    public string ModalTitle { get; set; } = string.Empty;


    void ShowModal(string message, string title)
    {
        ModalMessage = message;
        ModalTitle = title;
        IsModalVisible = true;
    }

    void CloseModal()
    {
        IsModalVisible = false;
    }
}
