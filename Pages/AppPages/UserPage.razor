@page "/userPage"
@using SharedLibrary.DTOs
@using ClientLibrary
@implements IDisposable
@inject State departmentState
@inject IJSRuntime JS

<div class="container mt-5">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header">
                    <h4>Users</h4>
                </div>

                <div class="modal fade @(IsVisible ? "show" : "")" tabindex="-1" role="dialog" style="display:@(IsVisible ? "block" : "none")" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Edit User Role</h5>
                                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDialog"></button>
                            </div>
                            <div class="modal-body">
                                <RadzenTemplateForm Data="@ManageUser" TItem="ManageUser" Submit="@Save">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="mb-3">
                                        <label for="role" class="form-label">Edit User Role</label>
                                        <RadzenDropDown @bind-Value="selectedRole" 
                                             Data="@SystemRoles" 
                                             TextProperty="Name" 
                                             ValueProperty="Name" 
                                              Change="@(args => OnRoleChange(args))" 
                                             class="form-control"/>
                                        <ValidationMessage For="@(() => ManageUser.Role)" />
                                    </div>

                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                                        <RadzenButton Text="Save" Icon="save" ButtonType="ButtonType.Submit" Class="btn btn-primary" />
                                    </div>
                                </RadzenTemplateForm>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-body" style="max-height: 580px; overflow-x:hidden; overflow-y:scroll">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">ID</th>
                                <th scope="col">Fullname</th>
                                <th scope="col">Email</th>
                                <th scope="col">Role</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (ManageUsers != null)
                            {
                                int count = 1;
                                foreach (var item in ManageUsers)
                                {
                                    <tr>
                                        <th scope="row">@count</th>
                                        <td>@item.UserId</td>
                                        <td>
                                            <img src="/images/man.png" class="rounded-circle" alt="" style="width: 45px; height: 45px"/>
                                            @item.Name
                                       </td>
                                        <td>@item.Email</td>
                                        <td>@item.Role</td>
                                        <td>
                                            <img src="/images/edit.png" id="CursorIcon" @onclick="()=>EditItem(item)" width="20" height="20" />
                                            <img src="/images/delete.png" id="CursorIcon" @onclick="()=>DeleteItem(item)" width="20" height="20" />
                                        </td>
                                    </tr>
                                    count++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6">
                                        <div class="alert alert-info text-center">No Users Found!</div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    #CursorIcon {
        cursor: pointer;
        color: #007bff;
        font-size: 24px;
        transition: transform 0.2s ease;
    }

    #CursorIcon:hover {
        transform: scale(1.2);
        color: #0056b3;
    }

    .modal.show {
        display: block;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal.fade {
        display: none;
    }
</style>


@code {
    ManageUser ManageUser  = new();
    public List<SystemRole> SystemRoles { get; set; } = new();
    public List<ManageUser> ManageUsers { get; set; } = new();

    private bool IsVisible { get; set; } = false;
    public string Title { get; set; } = "Add";

    // Initialized
    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        departmentState.Action += StateHasChanged;

    }
    public void Dispose()
    {
        departmentState.Action -= StateHasChanged;
    }

    private async Task GetUsers()
    {
        ManageUsers = await accountService.GetUsers();
    }


    private async Task GetRoles()
    {
        SystemRoles = await accountService.GetRoles();
    }


    //Handle Save
    private async Task HandleSaveOperationEvent(ManageUser manageUser)
    {
        var result = await accountService.UpdateUser(manageUser);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ManageUser = new();
            await GetUsers();
        }
    }
    // Save
    private string selectedRole;
    private void OnRoleChange(object selectedValue)
{
    selectedRole = selectedValue.ToString();
}
    private async Task Save()
    {
        if (string.IsNullOrEmpty(ManageUser.Name))
        {
            await JS.InvokeVoidAsync("alert", "You need to provide Role Name of User");
        }
        else
        {  
            ManageUser.Role = selectedRole; // Assign selected role before saving
            await HandleSaveOperationEvent(ManageUser);
            CloseDialog(); 
        }
    }

    // Edit and Delete
    private void EditItem(ManageUser user)
    {
        ManageUser = user;
        OpenDialog();
    }
    private async Task DeleteItem(ManageUser user)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {user.Name}?");
        if (!confirm) return;

        var response = await accountService.DeleteUser(user.UserId);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetUsers();
    }

    // To Open and Close Dialog
    public void OpenDialog()
    {
        IsVisible = true;
        StateHasChanged();
    }
    private void CloseDialog() 
    {
        IsVisible = false;
        StateHasChanged();
    }

    public void ChangeTitle(string title)
    {
        Title = title;
    }


    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await JS.InvokeVoidAsync("alert", "Success");
            return true;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Fail");
            return false;
        }
    }


    
}
