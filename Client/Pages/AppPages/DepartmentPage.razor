@page "/departmentPage"
@using BaseLibrary.Entities
@using Client.ApplicationStates
@implements IDisposable
@inject State departmentState
@inject IJSRuntime JS
   <div class="container mt-5">
        <div class="row">
           <div class="col-lg-12">
                <div class="card">
                        <div class="card-header">
                            <h4>Department</h4>
                            <button class="btn btn btn-dark float-end" @onclick="OpenDialog">
                                <i class="oi oi-plus" aria-hidden="true"></i>
                                   Add Department
                            </button>

            <div class="modal fade @(IsVisible ? "show" : "")" tabindex="-1" role="dialog" style="display:@(IsVisible ? "block" : "none")" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@Title Department</h5>
                            <button type="button" class="btn-close" aria-label="Close"  @onclick="CloseDialog"></button>
                        </div>
                        <div class="modal-body">

                             <RadzenTemplateForm Data="@Department" TItem="Department" Submit="@Save">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <div class="mb-3">
                                    <label for="name" class="form-label">Department Name</label>
                                    <InputText id="name" class="form-control" @bind-Value="Department.Name" />
                                    <ValidationMessage For="@(() => Department.Name)" />
                                    </div>
                                    

                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                                        <RadzenButton Text="Save" Icon="save" ButtonType="ButtonType.Submit" Class="btn btn-primary" />
                                    </div>
                                </RadzenTemplateForm>

                        </div>
                    </div>
                </div>
            </div>
        </div>
       <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">ID</th>
                        <th scope="col">Department</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Departments is not null)
                            {
                                int count = 1;
                                foreach (var item in Departments)
                                {
                                     <tr>
                                         <th scope="row">@count</th>
                                         <td>@item.Id</td>
                                         <td>@item.Name</td>
                                         <td>
                                              <img src="/images/edit.png" id="CursorIcon"
                                              @onclick="()=>EditItem(item)" width="20" height="20"/>
                                              <img src="/images/delete.png" id="CursorIcon"
                                              @onclick="()=>DeleteItem(item)" width="20" height="20"/>
                                         </td>
                                    </tr>
                                    count++;

                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4"><div class="alert alert-info text-center">
                                      No Department Found! Add New Department
                                    </div>
                                    </td>
                               </tr>
                            }
                          
                </tbody>
            </table>
        </div>
    </div>
</div>
</div>
</div>

<style>
#CursorIcon {
    cursor: pointer; 
    color: #007bff; 
    font-size: 24px; 
    transition: transform 0.2s ease; 
}

#CursorIcon:hover {
    transform: scale(1.2);
    color: #0056b3; 
}
</style>
@code {
    Department Department { get; set; } = new();
    public string Title { get; set; } = "Add";
    private bool IsVisible { get; set; } = false;

    public List<Department> Departments { get; set; } = new();

    // Close and Open Dialog
    private void CloseDialog() 
    {
        IsVisible = false;
        StateHasChanged();
    }

    public void OpenDialog()
    {
        IsVisible = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetDepartments();
        departmentState.Action += StateHasChanged;

    }

    public void Dispose()
    {
        departmentState.Action -= StateHasChanged;
    }


    void AddButton()
    {
        ChangeTitle("Add");
        Department = new();
        OpenDialog();
    }

    // Save
    private async Task Save()
    {
        if (string.IsNullOrEmpty(Department.Name))
        {
            await JS.InvokeVoidAsync("alert", "You need to provide Department name");
        }
        else
        {
            await HandleSaveOperationEvent(Department);
            CloseDialog(); 
        }
    }

    // Get all Departments
    private async Task GetDepartments()
    {
        Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
    }


    private async Task HandleSaveOperationEvent(Department department)
    {
        bool successCheck = false;
        if (department.Id > 0)
        {
            var result = await departmentService.Update(department, Constants.DepartmentBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await departmentService.Insert(department, Constants.DepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            Department = new();
            await GetDepartments();
            ChangeTitle("Add");
        }
    }

    public void ChangeTitle(string title)
    {
        Title = title;
    }


    // Edit and Delete Department
    private void EditItem(Department dep)
    {
        ChangeTitle("Update");
        Department = dep;
        OpenDialog();
    }

    private async Task DeleteItem(Department dep)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this Department?");
        if (!confirm) return;

        var response = await departmentService.DeleteById(dep.Id, Constants.DepartmentBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetDepartments();
    }


    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await JS.InvokeVoidAsync("alert", "Success");
            return true;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Fail");
            return false;
        }
    }
}
